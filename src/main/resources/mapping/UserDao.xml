<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
<!--   
    namespace：必须与对应的接口全类名一致  
    id:必须与对应接口的某个对应的方法名一致  
      
 -->  
<mapper namespace="com.liu.dao.UserDao">  
     <!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路劲 -->    
    <select id="findUser" parameterType="String" resultType="com.liu.model.User">  
    <![CDATA[ 
        select * from user where name=#{name}
    ]]>
    </select> 
    <!-- 只有一个参数的时候 -->
    <select id="findNum" parameterType="String" resultType="int">  
     <![CDATA[ 
        select userId from user where name='aa'
     ]]>
    </select>  
    <!-- 有多个参数的时候，注意参数为Map<String,Object>，里面存储对应的参数名key和值 -->
     <select id="findNum2" resultType="int">  
     <![CDATA[ 
        select count(userId) from user where 1=1
     ]]>
     <if test="name != null">
	    	AND name = #{name, jdbcType=VARCHAR}
	 </if>
    </select>  
    
    <resultMap type="com.liu.model.User" id="userMap">
		<id column="userId" property="userId"/>
		<result column="name" property="name"/>
		<result column="qq" property="qq"/>
		<result column="phone" property="phone"/>
	</resultMap>
    <select id="getAllUser" resultMap="userMap">
		select * from user
	</select>
    
    <insert id="insert" parameterType="com.liu.model.User" flushCache="true">  
        insert into user (userId, name, qq, phone) values (#{userId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR})  
    </insert>  
    <insert id="insert2" parameterType="com.liu.model.User" flushCache="true">  
        insert into user  
        <trim prefix="(" suffix=")" suffixOverrides=",">  
            userId, name, qq, phone,  
        </trim>  
        <trim prefix="values (" suffix=")" suffixOverrides=",">  
            #{userId,jdbcType=INTEGER},  
            #{name,jdbcType=VARCHAR},  
            #{qq,jdbcType=VARCHAR},  
            #{phone,jdbcType=VARCHAR},  
        </trim>  
    </insert>
    <update id="update" parameterType="com.liu.model.User">
		update user
		<trim prefix="set" suffixOverrides=",">
			<if test="name!=null">name=#{name},</if>
			<if test="qq!=null">qq=#{qq},</if>
			<if test="phone!=null">phone=#{phone},</if>
		</trim>
		where userId=#{userId}
	</update>
    <delete id="delete" parameterType="int">  
        delete from user where userId=#{userId}  
    </delete>  
      
    <!-- <insert id="save" parameterType="User">  
        insert into t_user(user_name,user_age) values(#{userName},#{age})  
    </insert>  
      
    <update id="update" parameterType="User">  
        update t_user set user_name=#{userName},user_age=#{age} where user_id=#{id}  
    </update>  
      
    <delete id="delete" parameterType="int">  
        delete from t_user where user_id=#{id}  
    </delete>  
      
    <select id="findAll" resultType="User">  
        select user_id id,user_name userName,user_age age from t_user  
    </select>  --> 
      
</mapper> 